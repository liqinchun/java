1.  一年实际Java工作编程经验，有良好的Java基础和良好的编程规范:
2.熟悉 Java 语言，熟悉 Java 中的集合，多线程。了解常用的设计模式。:
  集合: 数据，链表，队列（先进先出），栈（先进后出）
    Collection:
      List:
        ArrayList: 底层实现数组，线程不安全，查找快，增删慢
        LinkedList: 底层实现链表，线程不安全，查找慢，增删快。
        Vecter: 底层实现数据，继承AbstractList实现了List，是一个队列。线程安全。
      Set:
        HashSet: 用hashmap实现，线程不安全，不允许有重复值，允许存入null值，不保证存入数据的顺序。
      Queue:
      Map: 散列表（桶）
        HashMap: 键值对，不保证有序，允许null值与null键。
        TreeMap: 有序的键值对
        HashTable: 键值对，不保证有序，不允许null值与null键。线程安全，基于synchrinized关键字锁方法实现。
        CurrentHashMap: 键值对，线程安全，不可以有null键。ConcurrentHashMap的同步机制和这个不同，它不是加synchronized关键字，而是基于lock操作的，这样的目的是保证同步的时候，锁住的不是整个对象。一个ConcurrentHashMap由多个segment组成，每个segment包含一个Entity的数组。这里比HashMap多了一个segment类。该类继承了ReentrantLock类，所以本身是一个锁。当多线程对ConcurrentHashMap操作时，不是完全锁住map，而是锁住相应的segment。这样提高了并发效率。
    Iterator: 遍历
  熟悉多线程:
    线程状态:
      新建状态: 线程刚被new出来，Thread thread = new Thread()。
      就绪状态: 执行了start方法，线程随时有可能被cpu调度执行。
      运行状态: 线程获取cpu权限进行执行。
      阻塞状态: 线程因为某种原因失去了cpu使用权，暂时停止运行。只有等到线程就绪后才会执行。
      等待阻塞: 调用线程的wait方法，让线程等待某工作的完成。
      同步阻塞: 线程获取synchronized同步锁失败，会阻塞。
      其他阻塞: 通过调用线程的sleep和join或发出了i/o请求时，线程会进入到阻塞状态。
      死亡状态: 线程执行完毕或者因异常原因推出run（）方法，该线程结束生命周期。
    Object类: 定义了wait（），notify（），notifyAll（）等休眠/唤醒方法。
    Thread类: 定义了一些线程操作函数，sleep（）休眠函数，interrupt（）中断方法，getName（）获取线程name等。
    synchronized，关键字，区分为synchronized代码块和synchronized方法。synchronized关键字的作用时获取同步锁。
    Thread和Runable（实现多线程的两种方式）:
      Runable: Runable是一个接口，只包含了一个run（）方法，资源共享。
      Thread: Thread是一个类，这个类本身实现了Runable接口，资源不共享。
      一般我们新建线程的方式是新写一个类A实现Runable，然后new Thread（new A）;
  线程安全:
  了解常用的设计模式:
    工厂模式
    简单工厂模式: 静态方法工厂模式
    单例模式: 实例方法私有化，
      懒汉式: 要用的时候才
      饱汉式:
    代理模式:
    装饰模式:
    spring设计的设计模式汇总:
      工厂模式: bean
      单例模式: bean唯一
      代理:
      模板方法: template
      适配器:
      装饰者模式:
      观察者模式:
      策略模式:
3.熟悉 svn，git 等版本控制工具:
     代码管理工具:
       git:
       svn:
4.熟悉 mysql 数据库,以及 redis ，mongoDB 数据库，能进行 sql 调优:
     mysql聚合函数: sum（）求和、min（）最小值、count（）数量、max（）最大值、avg（）平均值。
     sql优化方案:
        合适的索引:
        反第三范式: 为了提高运行效率保留冗余数据，降低第三范式的标准。
        explain: 查看sql
        $与#: #可以防止sql注入，但是#都会把参数加上双引号，当需要传入参数为列名就会出错（order by+列名）。
        避免使用or: 使用or会使索引失效。可以用连表替换or。
        使用连接来代替子查询:
        in和not in 应该谨用:
        group by 分组: 在使用group by 分组查询时，默认分组后，还会排序，可能会降低速度.在group by 后面+order by。
        where子句: 尽量避免where子句中对字段进行函数操作，会导致引擎放弃使用索引而进行全表扫描。
        尽量避免全表扫描: 对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by涉及的列上建立索引。
     MySQL无法使用索引的情况总结:
       (1): 字段使用函数，将无法使用索引
       (2): Join 语句中 Join 条件字段类型不一致的时候 MySQL 无法使用索引
       (3): 复合索引的情况下，如果查询条件不包含索引列的最左边部分，即不满足最左前缀原则，则不会使用索引
       (4): 如果mysql估计使用索引扫描比全表扫描更慢，则不使用索引。(扫描数据超过30%，都会走全表)
       (5): 以%开头的like查询
       (6): 数据类型出现隐式转换的时候也不会使用索引，特别是当列类型是字符串，那么一定记得在where条件中把字符串常量值用引号引起来，否则即便这个列上有索引，MySQL也不会用到，因为MySQL默认把输入的常量值进行转换以后才进行检索
       (7): 用or分割开的条件，如果 or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到
    redis:
    redis消息类型: String、hash哈希、List列表、Set无序集合、Zset有序集合、HyperLogLog
    String
    redis消息队列：消息并不会持久化，list做的
    redis支持lua脚本：原子性
    redis支持管道：管道技术，Redis 管道技术可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应。
    redis持久化方案：RDB和AOF
      RDB：如果一定时间内超过一定数量key被改变，那么redis调用fork,现在有了子进程和父进程。父进程继续处理client请求，子进程将快照写入临时文件，然后临时文件替代原来的快照文件，子进程退出。
      持久化不及时，断电数据丢失问题：参见AOF持久化模式。
      AOF:为了尽量避免每一个命令丢失，redis将写命令都通过write（）函数已追加的方式写入文件中，
    同步策略:
       # appendfsync always      //每次收到写命令就立即强制写入磁盘，最慢的，但是保证完全的持久化，不推荐使用
      appendfsync everysec     //每秒钟强制写入磁盘一次，在性能和持久化方面做了很好的折中，推荐
       # appendfsync no    //完全依赖os，性能最好,持久化没保证
      文件会越来越大问题：
        1.子进程调用fork（）方法，根据快照生成一份整理过的临时文件
        2.父进程同时处理client请求，这时的请求依旧写入原来的文件中，但是也缓存一份。子进程失败后不会受影响。
        3.子进程完成整理之后通知父进程，父进程知晓之后将缓存写入新的文件中，完成文件的替换。
      比较: rdb恢复数据更快，rdb方便备份，rdb方式redis性能比aof方式好，rdb在保存rdb文件当数据量比较大时，会导致cpu非常紧张。
        aof恢复的时候要慢一点，aof恢复的时候可能会由于某些阻塞性命令导致无法恢复数据。
    hash槽: 对于redis集群来说，将数据分在多个redis实例中，redis是通过hash算法查找到key对应的槽。
    redis缓存穿透: 当在redis中没有查询到缓存之后会从DB中去查找，会对后端产生很大的压力。
    redis为什么快:
      数据结构简单: 单线程减少了不必要的线程切换，不用关心锁，内存数据库纯内存操作，多路I/O复用模型，非阻塞I/O。
      多路I/O复用模型: select函数可同时监控多个文件描述符的可读可写状态。I/O编程过程中，需要同时处理多个客户端接入请求时，可以利用多线程或者I/O多路复用技术进行处理。
      I/O多路复用技术通过把多个I/O的阻塞复用到同一个select阻塞上，一个进程监视多个描述符，一旦某个描述符就位， 能够通知程序进行读写操作。因为多路复用本质上是同步I/O，都需要应用程序在读写事件就绪后自己负责读写。
      最大的优势是系统开销小，不需要创建和维护额外线程或进程。
    redis集群的扩容: 节点上线，节点上线都是主节点，但是当前是不可用的，重新分配槽才生效。再加入从节点。
   mongoDB: 文件存储数据库。
   面向文档，
   没有事务
5.熟悉消息中间件kafka,mqtt:
    kafka: 顺序写入，消息以追加的方式写入文件，消息是压缩过的，把所有的消息压缩程一个批量的文件，并且进行合理的批量压缩减少I/O损耗。
    zookeeper: 早期数据是放在zookeeper中的，新版数据放在broker中，zookeeper只是对元数据的管理。
     broker:
      首领选举: 投票只能投一票，另外一个broker会请求，给先到的投票。
      脑裂: 多个broker同时认为自己是master节点。
    topic:
      分区: 消费者数量超过分区书无效。
        分区首领: 首领的选举由broker决定。
        分区副本: 最少同步副本，可设置消息写入多少个分区副本才算消息写入成功。
    生产者: 往分区写入消息
    消费者: 消费消息。消息偏移量。
    消费模式: 批量消费，单个消费，最大拉取数量，最大时间拉拉取，最小拉取。
    提交: 手动提交和自动提交
    mqtt:
     发布订阅
   消息服务质量：qos
     0：最多分发一次
     1：至少分发一次，可能会分发多次
     2：仅分发一次，最高服务质量
   问题：clientId没有随机，导致相同的client在多个pod中被相互挤掉。
   重连，lostconnetion方法中进行重连。
   保留一条空消息，设置消息保留。setRetained方法设置true。
6.理解计算机网络，TCP/IP协议.负责过项目组开发服务器的网络搭建:
     应用层: http协议，dns，ftp，telenet
     运输层: tcp udp协议 尽最大努力保障服务
     tcp: 面向连接的，可靠，速度慢，邮件。
       三次握手:
       四次挥手:
        移动
      udp: 面向无连接的,不可靠，适用场景视频等
    网络层: ip协议，arp，icmp
      IP协议: 四类IP类型
        A: 网络号8+主机号32
        B: 网络号16+主机号16
        C: 网络号32+主机号8
        D:
      子网掩码: 子网掩码只有一个作用，就是将IP地址分为网络地址和主机地址
    数据链路层:
    物理层:
8.理解 linux，理解 k8s,docker 容器技术, 了解分布式与集群模式。有过维护公司私有云环境经验，处理过线上应用对redis，mqtt，kafka的连接问题:
  k8s:
   kubectl：客户端命令行工具，作为整个系统的入口。
   kube-apiserver：以restapi方式提供接口
   kube-controller-manager：执行整个系统的后台服务，包括节点状态状况，pod个数，pod和service的关联等。
   kube-scheduler：负责节点资源管理，接受kube-apiserver创建pod任务，并分配到某个节点
   etcd：负责节点间的服务发现和配置共享。
   kube-proxy：运行在每个计算节点上，负责pod网络代理，定时从etcd获取service信息来做对应的策略。
   kubeclet：运行在每个计算节点上，作为agent，接收分配该节点pods任务及管理容器，周期性的获取容器信息并反馈给kube-apiserver。
   dns：域名解析服务器。
   node 节点
   pod 最小单元 pause+容器
   deployment 管理
   rc 管理
   rs 管理
   sts 管理集群的
   service：服务
   pvc：存储卷
  docker:
9.工作技术栈: k8s ，docker ，spring boot ，mysql ，redis，mongodb，kafka，mqtt，linux。

cap理论:数据一致性，分区容错性，可用性